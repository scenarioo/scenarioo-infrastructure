#
# Deploys / updates an already deployed branch
#
- name: Load config.json
  include_vars:
    file: "{{ config.demoConfigFolder }}/{{ branch }}.json"
    name: branchConfig

- name: "{{ branch }} - Create tomcat context config"
  template:
    src: branch-context-config.xml.j2
    dest: "{{ config.tomcatFolder }}/conf/Catalina/localhost/scenarioo-{{ branch }}.xml"

- name: "{{ branch }} - Create docu artifacts folder"
  file: path="{{ config.scenariooDocuFolder }}/{{ branch }}" state=directory

#
# Deploy wikipedia example demo docu
#

- name: "{{ branch }} - wikipedia example docu - does it exist?"
  stat:
    path: "{{ config.scenariooDocuFolder }}/{{ branch }}/exampleDocu.sha256"
  register: example_docu_sha_file

- name: "{{ branch }} - wikipedia example docu - does it need update?"
  shell: "if [[ $(cat {{ config.scenariooDocuFolder }}/{{ branch }}/exampleDocu.sha256) == \"{{ branchConfig.exampleDocuArtifactSha256 }}\" ]]; then echo NO_UPDATE_NEEDED; else echo UPDATE; fi"
  args:
    executable: /bin/bash
  register: example_docu_status
  when: branchConfig.exampleDocuArtifactSha256 is defined

- name: "{{ branch }} - wikipedia example docu - Clean old wikipedia demo data"
  shell: "rm -rf {{ config.scenariooDocuFolder }}/{{ branch }}/wikipedia*"
  args:
    executable: /bin/bash
  when:
    - branchConfig.exampleDocuArtifactSha256 is defined
    - example_docu_status.stdout == "UPDATE"

- name: "{{ branch }} - wikipedia example docu - Download"
  get_url:
    url: "{{ branchConfig.exampleDocuArtifact }}?circle-token={{ lookup('env', 'CIRLCE_TOKEN') }}"
    dest: "{{ config.scenariooDocuFolder }}/{{ branch }}/exampleDocu.zip"
    sha256sum: "{{ branchConfig.exampleDocuArtifactSha256 }}"
  no_log: true  # Don't show CIRCLE_TOKEN in logs
  when:
    - branchConfig.exampleDocuArtifactSha256 is defined
    - example_docu_status.stdout == "UPDATE"

- name: "{{ branch }} - wikipedia example docu - Unarchive downloaded artifacts"
  unarchive:
    src: "{{ config.scenariooDocuFolder }}/{{ branch }}/exampleDocu.zip"
    dest: "{{ config.scenariooDocuFolder }}/{{ branch }}/"
    remote_src: yes
  when:
    - branchConfig.exampleDocuArtifactSha256 is defined
    - example_docu_status.stdout == "UPDATE"
  no_log: true  # Output is massive

- name: "{{ branch }} - wikipedia example docu - Update checksum of downloaded docu"
  shell: "echo {{ branchConfig.exampleDocuArtifactSha256 }} > {{ config.scenariooDocuFolder }}/{{ branch }}/exampleDocu.sha256"
  when:
    - branchConfig.exampleDocuArtifactSha256 is defined
    - example_docu_status.stdout == "UPDATE"

- name: "{{ branch }} - wikipedia example docu - Delete downloaded ZIP"
  file: path="{{ config.scenariooDocuFolder }}/{{ branch }}/exampleDocu.zip" state=absent
  when:
    - branchConfig.exampleDocuArtifactSha256 is defined
    - example_docu_status.stdout == "UPDATE"

#
# E2E branch docu deployment
#

# For each build downloaded we create a <buildNumber>.downloaded file in the scenarioo folder
# This way we know that we don't have to download the artifact a second time
# The following step checks for each docuArtifact if such a file exists and stores the result in stat_artifacts
- name: "{{ branch }} - Check status of downloaded artifacts"
  stat: path="{{ config.scenariooDocuFolder }}/{{ branch }}/{{ item.build }}.downloaded"
  register: stat_artifacts_cmd
  with_items: "{{ branchConfig.docuArtifacts }}"
- set_fact: stat_artifacts="{{ stat_artifacts_cmd.results }}"
# Datastructure of stat_artifacts:
#   stat_artifacts.stat.exists = true/false
#   stat_artifacts.item = { build: "", url: "", sha256: ""}

# Iterates over stat_artifacts
- name: "{{ branch }} - Download missing docu artifacts"
  get_url:
    url: "{{ artifact.item.url }}?circle-token={{ lookup('env', 'CIRLCE_TOKEN') }}"
    dest: "{{ config.scenariooDocuFolder }}/{{ branch }}/{{ artifact.item.build }}.zip"
  when: artifact.stat.exists == false
  with_items: "{{ stat_artifacts }}"
  loop_control:
      loop_var: artifact
  no_log: true  # Don't show CIRCLE_TOKEN in logs

- name: "{{ branch }} - Unarchive downloaded docu artifacts"
  unarchive:
    src: "{{ config.scenariooDocuFolder }}/{{ branch }}/{{ artifact.item.build }}.zip"
    dest: "{{ config.scenariooDocuFolder }}/{{ branch }}"
    remote_src: yes
  when: artifact.stat.exists == false
  with_items: "{{ stat_artifacts }}"
  loop_control:
      loop_var: artifact
  no_log: true  # Output is massive

- name: "{{ branch }} - Copy branchConfig"
  copy:
    src: "{{ config.demoConfigFolder }}/{{ branch }}.json"
    dest: "{{ config.scenariooDocuFolder }}/{{ branch }}/branchConfig.json"

# Deleting builds that are present on disk but not in the branchConfig is cumbersome with ansible => Use a shellscript
- name: "{{ branch }} - Cleanup builds"
  script: "cleanupBuilds.sh {{ branch }} {{ config.scenariooDocuFolder }}"
  register: build_cleanup
- debug: var=build_cleanup.stdout_lines # We want to see in CircleCI logs what happened during cleanup

- name: "{{ branch }} - Mark artifacts as downloaded"
  template:
    src: downloadedArtifact.j2
    dest: "{{ config.scenariooDocuFolder }}/{{ branch }}/{{ artifact.item.build }}.downloaded"
  when: artifact.stat.exists == false
  with_items: "{{ stat_artifacts }}"
  loop_control:
      loop_var: artifact

- name: "{{ branch }} - Delete downloaded docu artifacts ZIPs"
  file: path="{{ config.scenariooDocuFolder }}/{{ branch }}/{{ artifact.item.build }}.zip" state=absent
  when: artifact.stat.exists == false
  with_items: "{{ stat_artifacts }}"
  loop_control:
      loop_var: artifact

#
# Deployment of WAR
#

- name: "{{ branch }} - Ensure correct permissions"
  file: dest="{{ config.scenariooDocuFolder }}/{{ branch }}" owner=tomcat8 group=tomcat8 recurse=yes

- name: "{{ branch }} - Download & deploy war"
  get_url:
    url: "{{ branchConfig.warArtifact }}?circle-token={{ lookup('env', 'CIRLCE_TOKEN') }}"
    dest: "{{ config.tomcatFolder }}/webapps/scenarioo-{{ branch }}.war"
    sha256sum: "{{ branchConfig.warArtifactSha256 }}"     # Will only download if checksum changed
  no_log: true  # Don't show CIRCLE_TOKEN in logs

- name: "{{ branch }} - Wait for deployment"
  uri:
    url: "http://{{ config.scenariooHost }}/scenarioo-{{ branch }}"
    status_code: 200
  register: result
  until: result.status == 200
  delay: 3
  retries: 60
  when: lookup('env', 'ENVIRONMENT') != 'dev'   # Because would fail when using vagrant

- name: "{{ branch }} - Wait for Imports to finish"
  uri:
    url: "http://{{ config.scenariooHost }}/scenarioo-{{ branch }}/rest/builds/importsAndComparisonCalculationsFinished"
    return_content: yes
  register: this
  until: "'true' in this.content"
  delay: 3
  retries: 60
  when: lookup('env', 'ENVIRONMENT') != 'dev'   # Because would fail when using vagrant