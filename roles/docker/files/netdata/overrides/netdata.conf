# netdata configuration
#
# You can download the latest version of this file, using:
#
#  wget -O /etc/netdata/netdata.conf http://localhost:19999/netdata.conf
# or
#  curl -o /etc/netdata/netdata.conf http://localhost:19999/netdata.conf
#
# You can uncomment and change any of the options below.
# The value shown in the commented settings, is the default value.
#

# global netdata configuration

[global]
	# run as user = root
	# host access prefix = /host
	# glibc malloc arena max for plugins = 1
	# glibc malloc arena max for netdata = 1
	# hostname = 9237e8e81371
	# history = 3996
	# update every = 1
	# config directory = /etc/netdata
	# log directory = /var/log/netdata
	# plugins directory = /usr/libexec/netdata/plugins.d
	# web files directory = /usr/share/netdata/web
	# cache directory = /var/cache/netdata
	# lib directory = /var/lib/netdata
	# home directory = /var/cache/netdata
	# memory mode = save
	# memory deduplication (ksm) = yes
	# TZ environment variable = :/etc/localtime
	# debug flags = 0x0000000000000000
	# debug log = /var/log/netdata/debug.log
	# error log = /var/log/netdata/error.log
	# access log = /var/log/netdata/access.log
	# errors flood protection period = 1200
	# errors to trigger flood protection = 200
	# pthread stack size = 8388608
	# OOM score = 1000
	# process scheduling policy = idle
	# cleanup obsolete charts after seconds = 3600
	# cleanup orphan hosts after seconds = 3600
	# delete obsolete charts files = yes
	# delete orphan hosts files = yes

[web]
	# default port = 19999
	# mode = multi-threaded
	# listen backlog = 4096
	# bind to = *
	# web files owner = root
	# web files group = root
	# disconnect idle clients after seconds = 60
	# respect do not track policy = no
	# x-frame-options response header =
	# enable gzip compression = yes
	# gzip compression strategy = default
	# gzip compression level = 3
	# custom dashboard_info.js =

[plugins]
	# PATH environment variable = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin
	# PYTHONPATH environment variable =
	# tc = yes
	# idlejitter = yes
	# proc = yes
	# diskspace = yes
	# cgroups = yes
	# checks = no
	# enable running new plugins = yes
	# check for new plugins every = 60
	# node.d = yes
	# apps = yes
	# charts.d = yes
	# fping = yes
	# python.d = yes

[health]
	# enabled = yes
	# in memory max health log entries = 1000
	# script to execute on alarm = /usr/libexec/netdata/plugins.d/alarm-notify.sh
	# health configuration directory = /etc/netdata/health.d
	# run at least every seconds = 10
	# postpone alarms during hibernation for seconds = 60
	# rotate log every lines = 2000

[registry]
	# enabled = no
	# registry db directory = /var/lib/netdata/registry
	# netdata unique id file = /var/lib/netdata/registry/netdata.public.unique.id
	# registry db file = /var/lib/netdata/registry/registry.db
	# registry log file = /var/lib/netdata/registry/registry-log.db
	# registry save db every new entries = 1000000
	# registry expire idle persons days = 365
	# registry domain =
	# registry to announce = https://registry.my-netdata.io
	# registry hostname = 9237e8e81371
	# verify browser cookies support = yes
	# max URL length = 1024
	# max URL name length = 50

[backend]
	# host tags =
	# enabled = no
	# data source = average
	# type = graphite
	# destination = localhost
	# prefix = netdata
	# hostname = 9237e8e81371
	# update every = 10
	# buffer on failures = 10
	# timeout ms = 20000
	# send names instead of ids = yes
	# send charts matching = *

[statsd]
	# enabled = yes
	# update every (flushInterval) = 1
	# udp messages to process at once = 10
	# create private charts for metrics matching = *
	# max private charts allowed = 200
	# max private charts hard limit = 1000
	# private charts memory mode = save
	# private charts history = 3996
	# decimal detail = 1000
	# histograms and timers percentile (percentThreshold) = 95.00000
	# add dimension for number of events received = yes
	# gaps on gauges (deleteGauges) = no
	# gaps on counters (deleteCounters) = no
	# gaps on meters (deleteMeters) = no
	# gaps on sets (deleteSets) = no
	# gaps on histograms (deleteHistograms) = no
	# gaps on timers (deleteTimers) = no
	# listen backlog = 4096
	# default port = 8125
	# bind to = udp:localhost tcp:localhost

[services.cpu]
	# history = 3996
	# enabled = yes
	# cache directory = /var/cache/netdata/services.cpu
	# chart type = stacked
	# type = services
	# family = cpu
	# units = %
	# context = services.cpu
	# priority = 19000
	# gap when lost iterations above = 1
	# name = services.cpu
	# title = Systemd Services CPU utilization (200% = 2 cores)
	# dim system.slice_tomcat8.service name = tomcat8
	# dim system.slice_tomcat8.service algorithm = incremental
	# dim system.slice_tomcat8.service multiplier = 100
	# dim system.slice_tomcat8.service divisor = 100
	# dim system.slice_nginx.service name = nginx
	# dim system.slice_nginx.service algorithm = incremental
	# dim system.slice_nginx.service multiplier = 100
	# dim system.slice_nginx.service divisor = 100

[services.mem_usage]
	# history = 3996
	# enabled = yes
	# cache directory = /var/cache/netdata/services.mem_usage
	# chart type = stacked
	# type = services
	# family = mem
	# units = MB
	# context = services.mem_usage
	# priority = 19010
	# gap when lost iterations above = 1
	# name = services.mem_usage
	# title = Systemd Services Used Memory without Cache
	# dim system.slice_tomcat8.service name = tomcat8
	# dim system.slice_tomcat8.service algorithm = absolute
	# dim system.slice_tomcat8.service multiplier = 1
	# dim system.slice_tomcat8.service divisor = 1048576
	# dim system.slice_nginx.service name = nginx
	# dim system.slice_nginx.service algorithm = absolute
	# dim system.slice_nginx.service multiplier = 1
	# dim system.slice_nginx.service divisor = 1048576

[services.throttle_io_read]
	# history = 3996
	# enabled = yes
	# cache directory = /var/cache/netdata/services.throttle_io_read
	# chart type = stacked
	# type = services
	# family = disk
	# units = KB/s
	# context = services.throttle_io_read
	# priority = 19160
	# gap when lost iterations above = 1
	# name = services.throttle_io_read
	# title = Systemd Services Throttle Disk Read Bandwidth
	# dim system.slice_tomcat8.service name = tomcat8
	# dim system.slice_tomcat8.service algorithm = incremental
	# dim system.slice_tomcat8.service multiplier = 1
	# dim system.slice_tomcat8.service divisor = 1024
	# dim system.slice_nginx.service name = nginx
	# dim system.slice_nginx.service algorithm = incremental
	# dim system.slice_nginx.service multiplier = 1
	# dim system.slice_nginx.service divisor = 1024

[services.throttle_io_write]
	# history = 3996
	# enabled = yes
	# cache directory = /var/cache/netdata/services.throttle_io_write
	# chart type = stacked
	# type = services
	# family = disk
	# units = KB/s
	# context = services.throttle_io_write
	# priority = 19170
	# gap when lost iterations above = 1
	# name = services.throttle_io_write
	# title = Systemd Services Throttle Disk Write Bandwidth
	# dim system.slice_tomcat8.service name = tomcat8
	# dim system.slice_tomcat8.service algorithm = incremental
	# dim system.slice_tomcat8.service multiplier = 1
	# dim system.slice_tomcat8.service divisor = 1024
	# dim system.slice_nginx.service name = nginx
	# dim system.slice_nginx.service algorithm = incremental
	# dim system.slice_nginx.service multiplier = 1
	# dim system.slice_nginx.service divisor = 1024

[services.throttle_io_ops_read]
	# history = 3996
	# enabled = yes
	# cache directory = /var/cache/netdata/services.throttle_io_ops_read
	# chart type = stacked
	# type = services
	# family = disk
	# units = operations/s
	# context = services.throttle_io_ops_read
	# priority = 19180
	# gap when lost iterations above = 1
	# name = services.throttle_io_ops_read
	# title = Systemd Services Throttle Disk Read Operations
	# dim system.slice_tomcat8.service name = tomcat8
	# dim system.slice_tomcat8.service algorithm = incremental
	# dim system.slice_tomcat8.service multiplier = 1
	# dim system.slice_tomcat8.service divisor = 1
	# dim system.slice_nginx.service name = nginx
	# dim system.slice_nginx.service algorithm = incremental
	# dim system.slice_nginx.service multiplier = 1
	# dim system.slice_nginx.service divisor = 1

[services.throttle_io_ops_write]
	# history = 3996
	# enabled = yes
	# cache directory = /var/cache/netdata/services.throttle_io_ops_write
	# chart type = stacked
	# type = services
	# family = disk
	# units = operations/s
	# context = services.throttle_io_ops_write
	# priority = 19190
	# gap when lost iterations above = 1
	# name = services.throttle_io_ops_write
	# title = Systemd Services Throttle Disk Write Operations
	# dim system.slice_tomcat8.service name = tomcat8
	# dim system.slice_tomcat8.service algorithm = incremental
	# dim system.slice_tomcat8.service multiplier = 1
	# dim system.slice_tomcat8.service divisor = 1
	# dim system.slice_nginx.service name = nginx
	# dim system.slice_nginx.service algorithm = incremental
	# dim system.slice_nginx.service multiplier = 1
	# dim system.slice_nginx.service divisor = 1